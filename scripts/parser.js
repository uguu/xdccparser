// Generated by CoffeeScript 1.3.3
var bottable, datatable, infoHash, infotable, packHash, packlistArr, parseBotlist, parsePacklist, revhash;

packlistArr = [];

packHash = {};

infoHash = {};

revhash = {};

datatable = 0;

infotable = 0;

bottable = 0;

parsePacklist = function() {
  var bot, fail, fetch, fin, grabbed, i, parse, success, total, _i, _len, _results;
  total = packlistArr.length;
  success = 0;
  fail = 0;
  grabbed = 0;
  $('#total').text(total);
  $('#msg').text('Collecting Packlists.');
  fin = function() {
    if (total === grabbed) {
      return adjustUI(total);
    }
  };
  parse = function(bot, url) {
    var i, pack, packinfo, _i, _len, _ref;
    packHash[url] = [];
    infoHash[url] = [];
    revhash[bot.nick] = url;
    _ref = bot.packs;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      pack = _ref[i];
      packinfo = [i + 1, pack.gets, pack.name, pack.size, pack.group, bot.nick];
      datatable.fnAddData(packinfo, false);
      packHash[url].push(packinfo);
    }
    infoHash[url].push(['Transferred', 'Open Slots', 'Queue', 'Idlequeue', 'Curr. Bandwidth', 'Uptime', 'Nick']);
    infoHash[url].push([bot.transfer.total, (bot.slots.max - bot.slots.use) + '/' + bot.slots.max, bot.mainqueue.use + '/' + bot.mainqueue.max, bot.idlequeue.use + '/' + bot.idlequeue.max, bot.bandwidth.use, bot.uptime.current, bot.nick]);
    return bottable.fnAddData([bot.nick, bot.packsum], false);
  };
  fetch = function(url, cb) {
    return $.getJSON(url).done(function(json) {
      onSuccess(++success);
      if (packHash[url] === void 0) {
        return cb(json, url);
      }
    }).fail(function() {
      return onFailure(++fail);
    }).always(function() {
      grabbed++;
      $('#processed').text(i);
      return fin();
    });
  };
  _results = [];
  for (i = _i = 0, _len = packlistArr.length; _i < _len; i = ++_i) {
    bot = packlistArr[i];
    _results.push(fetch(bot, parse));
  }
  return _results;
};

parseBotlist = function(botlistArr) {
  var derp, fail, fetch, fin, grabbed, i, parse, success, tograb, _i, _results;
  grabbed = 0;
  success = 0;
  fail = 0;
  tograb = botlistArr.length;
  derp = {};
  $('#total').text(tograb);
  fin = function() {
    if (tograb === grabbed) {
      return parsePacklist();
    }
  };
  parse = function(json) {
    var i, item, newgrab, _i, _j, _len, _results;
    newgrab = 0;
    for (_i = 0, _len = json.length; _i < _len; _i++) {
      item = json[_i];
      console.log(item.type + ':' + item.loc);
      switch (item.type) {
        case "packlist":
          console.log('pushed ' + item.loc);
          packlistArr.push(item.loc);
          break;
        case "botlist":
          botlistArr.push(item.loc);
          tograb++;
          newgrab++;
      }
    }
    console.log(botlistArr);
    _results = [];
    for (i = _j = 0; 0 <= newgrab ? _j < newgrab : _j > newgrab; i = 0 <= newgrab ? ++_j : --_j) {
      _results.push(fetch(botlistArr[grabbed + i], parse));
    }
    return _results;
  };
  fetch = function(url, cb) {
    return $.getJSON(url).always(function() {
      return grabbed++;
    }).done(function(json) {
      onSuccess(++success);
      if (derp[url] !== true) {
        return cb(json);
      }
    }).fail(function() {
      return onFailure(++fail);
    }).always(function() {
      $('#processed').text(grabbed);
      $('#total').text(tograb);
      derp[url] = true;
      return fin();
    });
  };
  _results = [];
  for (i = _i = 0; 0 <= tograb ? _i < tograb : _i > tograb; i = 0 <= tograb ? ++_i : --_i) {
    _results.push(fetch(botlistArr[i], parse));
  }
  return _results;
};

$(document).ready(function() {
  datatable = $('#packlisttable').dataTable({
    'bFilter': true,
    'sDom': 'lrt',
    'bPaginate': false,
    'oSearch': {
      'bRegex': true
    },
    'aaSorting': [[5, 'asc'], [0, 'asc']]
  });
  new FixedHeader(datatable);
  infotable = $('#infotable').dataTable({
    'bFilter': false,
    'sDom': 'lrt',
    'bPaginate': false,
    'bSort': false
  });
  bottable = $('#bottable').dataTable({
    'bFilter': false,
    'sDom': 'lrt',
    'bPaginate': false,
    'aaSorting': [[0, 'asc']]
  });
  parseBotlist(['botlist.json']);
  return datatable.fnAdjustColumnSizing();
});
